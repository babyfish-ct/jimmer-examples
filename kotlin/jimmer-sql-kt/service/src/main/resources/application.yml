spring:

  # Disable redisson for default profile
  autoconfigure:
    exclude:
      - org.redisson.spring.starter.RedissonAutoConfiguration

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:jimmer-sql-kt;database_to_upper=true

# You can open `http://localhost:8080/openapi.html` to view the jimmer-swagger
# 
# You can also download the typescript files generated for the client via
#  http://localhost:8080/ts.zip.
#
# Unlike other solutions that automatically connects the front-end
# team and the back-end team, jimmer allows the front-end team and
# the back-end team to see different perspectives.
#
# The backend team uses jimmer's unified dynamic entity model instead
# of defining DTO types for each business scenario.
# For service providers, eliminating the DTO explosion problem will
# bring great convenience.
#
# However, for service consumers, each business scenario has a
# corresponding DTO definition to make the usage very clear. It needs DTO
# definition explosion, because it only considers consumption, not providing.
#
# The annotation `@org.babyfish.jimmer.client.FetchBy` is used to make the
# generated TypeScript code contain the DTO model hidden by jimmer backend

jimmer:
  language: kotlin
  offset-optimizing-threshold: 10
  id-only-target-checking-level: ALL
  database-validation-mode: ERROR
  show-sql: true
  pretty-sql: true

  # You can enable the following configuration line `inline-sql-variables: true`,
  # restart the application and call some REST APIs again to see what happens
  # inline-sql-variables: true
  
  executor-context-prefixes:
    - org.babyfish.jimmer.sql.example.business
  client:
    ts:
      path: /ts.zip
    openapi:
      path: /openapi.yml
      ui-path: /openapi.html
      properties:
        info:
          title: Jimmer REST Example(Kotlin)
          description: This is the OpenAPI UI of Jimmer REST Example(Kolint)
          version: 0.8.64
        securities:
          - tenantHeader: [ ]
        components:
          securitySchemes:
            tenantHeader:
              type: apiKey
              name: tenant
              in: HEADER

demo:
  default-tenant: a
