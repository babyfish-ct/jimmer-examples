/*
 * 1. If any other Kotlin code is modified,
 * you can directly click the `Run` button of Intellij
 *
 * 2. Otherwise, the project must be rebuilt
 */

export org.babyfish.jimmer.sql.example.kt.model.Book
    -> package org.babyfish.jimmer.sql.example.kt.service.dto

input BookInput {

    /*
     * #allScalars: All scalar fields of `Book`, `TenantAware` and `BaseEntity`
     *
     * #allScalars(this)/#allScalars(Book): All scalar fields of `Book`, exclude `TenantAware`, `BaseEntity`
     */
    #allScalars(this)

    /*
     * You can also write `storeId` because the @IdView property `Book.storeId` has already been defined.
     *
     * However, this is better way to not assume that `@IdView` property must be present.
     */
    id(store)

    /*
     * You can also write `authorIds` because the @IdView property `Book.authorIds` has already been defined.
     *
     * However, this is better way to not assume that `@IdView` property must be present.
     */
    id(authors) as authorIds // Override default alias `authorsId`
}

specification BookSpecification {
    like/i(name)
    ge(price)
    le(price)
    flat(store) {
        like/i(name) as storeName
    }
    flat(authors) {
        like/i(firstName, lastName) as authorName
    }
}

